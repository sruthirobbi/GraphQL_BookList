{"version":3,"sources":["queries/queries.js","components/BookDetails/BookDetails.js","components/BookList/BookList.js","components/AddBook/AddBook.js","App.js","serviceWorker.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookDetailsQuery","BookDetails","props","useQuery","variables","id","bookid","loading","data","error","book","console","log","name","genre","author","className","map","item","key","displayBookDetails","BookList","useState","getBookId","setBookId","books","onClick","e","AddBook","authorId","bookData","setBookData","useMutation","onSubmit","preventDefault","refetchQueries","query","type","value","onChange","target","authors","list","client","ApolloCient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dfda67e8.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nconst getBooksQuery = gql`\r\n{\r\n    books{\r\n        name\r\n        id\r\n        genre\r\n    }\r\n}\r\n`\r\n\r\nconst getAuthorsQuery = gql`\r\n{\r\n    authors{\r\n            name,\r\n            id\r\n        }\r\n}\r\n`\r\n\r\nconst addBookMutation =gql`\r\n    mutation($name:String!,$genre:String!,$authorId:ID!){\r\n        addBook(name:$name,genre:$genre,authorId:$authorId){\r\n            name,\r\n            id\r\n        }\r\n    }\r\n`\r\nconst getBookDetailsQuery = gql`\r\n    query($id:ID){\r\n            book(id:$id){\r\n                name,\r\n                genre,\r\n                id,\r\n                author{\r\n                    id,\r\n                    name,\r\n                    age,\r\n                    book{\r\n                        name\r\n                        id\r\n                    }\r\n                }\r\n            }\r\n        }\r\n`\r\nexport {getAuthorsQuery,getBooksQuery,addBookMutation,getBookDetailsQuery};","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {getBookDetailsQuery} from '../../queries/queries';\r\n\r\nfunction BookDetails(props){\r\n    const {loading,error,data} = useQuery(getBookDetailsQuery, {\r\n                variables:{\r\n                    id:props.bookid\r\n                }\r\n    });\r\n\r\n   const displayBookDetails = () => {\r\n       const {book} = props.bookid;\r\n       console.log(\"********\",data)\r\n       if(data){\r\n           return(\r\n               <div>\r\n                   <h2>{data.book.name}</h2>\r\n                    <p>{data.book.genre}</p>\r\n                    <p>{data.book.author.name}</p>\r\n                    <p>All Books by this author: </p>\r\n                    <ul className=\"other-books\">\r\n                        {data.book.author.book.map(item=>{\r\n                            return <li key={item.id}>{item.name}</li>\r\n                        })}\r\n                    </ul>\r\n               </div>\r\n           )\r\n       }else{\r\n           return(\r\n               <div>No Book Selected</div>\r\n           )\r\n       }\r\n   }\r\n    \r\n    if(loading) return <div>Book Details Loading...</div>\r\n\r\n    return(\r\n        <div id=\"bookDetails\">\r\n            {displayBookDetails()}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BookDetails;\r\n","import React,{useState} from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {getBooksQuery} from '../../queries/queries';\r\nimport BookDetails from '../BookDetails/BookDetails';\r\n\r\nfunction BookList() {\r\n    const [getBookId,setBookId] = useState('');\r\n    const {loading,error,data} = useQuery(getBooksQuery);\r\n\r\n    if (loading) return <div>Books Loading...</div>;\r\n    if(error) return <div>Error Loading...</div>\r\n\r\n    return (\r\n        <div>\r\n            <ul id=\"book-list\" >\r\n            {data.books.map(book=>(\r\n                <li key={book.id} onClick={e=>setBookId(book.id)}>{book.name} </li>\r\n            ))}\r\n            </ul>\r\n            <BookDetails bookid={getBookId}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookList;\r\n","import React,{useState} from 'react';\r\nimport { useQuery,useMutation } from '@apollo/react-hooks';\r\nimport {getAuthorsQuery,addBookMutation,getBooksQuery} from '../../queries/queries';\r\n\r\nfunction AddBook(){\r\n    let input;\r\n    const [bookData,setBookData] = useState({name:'',genre:'',authorId:''});\r\n    const [book] = useMutation(addBookMutation);\r\n    const {loading,error,data} = useQuery(getAuthorsQuery);\r\n    \r\n\r\n    const submitForm =(e)=>{\r\n        e.preventDefault();\r\n        book({\r\n            variables:{\r\n                name:bookData.name,\r\n                genre:bookData.genre,\r\n                authorId:bookData.authorId\r\n            },\r\n            refetchQueries:[{query:getBooksQuery}]\r\n        })\r\n    }\r\n\r\n    if(loading) return <div>Authors Loading....</div>;\r\n\r\n    return(\r\n        <form id=\"add-book\"\r\n                onSubmit={submitForm}\r\n        >\r\n            <div className=\"field\">\r\n                <label>Book Name:</label>\r\n                <input type=\"text\" value={bookData.name}  onChange={e=>setBookData({...bookData,name:e.target.value})}/>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n                <label>Genre:</label>\r\n                <input type=\"text\"  value={bookData.genre} onChange={e=>setBookData({...bookData,genre:e.target.value})}/>\r\n            </div>\r\n\r\n\r\n            <div className=\"field\">\r\n                <label>Author:</label>\r\n                <select value={bookData.authorId} onChange={e=>setBookData({...bookData,authorId:e.target.value})} >\r\n                    <option>Select Author</option>\r\n                    {data.authors.map(list=>(\r\n                            <option key={list.id} value={list.id}>{list.name}</option>\r\n                    ))}\r\n                </select>\r\n                \r\n            </div>\r\n\r\n            <button type=\"submit\">+</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddBook;","import React from 'react';\nimport ApolloCient from 'apollo-boost';\nimport {ApolloProvider} from '@apollo/react-hooks'\nimport BookList from './components/BookList/BookList';\nimport AddBook from './components/AddBook/AddBook'\n\n//apollo client set Up\nconst client = new ApolloCient({\n  uri:'/graphql'\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Book List</h1>\n        <BookList/>\n        <AddBook/>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}